diff --git a/src/base/bittorrent/session.cpp b/src/base/bittorrent/session.cpp
index 9bc5125ef7..bf9b2a589a 100644
--- a/src/base/bittorrent/session.cpp
+++ b/src/base/bittorrent/session.cpp
@@ -268,18 +268,18 @@ Session::Session(QObject *parent)
 #if LIBTORRENT_VERSION_NUM >= 10100
     , m_listenInterfaceChanged(true)
 #endif
-    , m_isDHTEnabled(BITTORRENT_SESSION_KEY("DHTEnabled"), true)
-    , m_isLSDEnabled(BITTORRENT_SESSION_KEY("LSDEnabled"), true)
-    , m_isPeXEnabled(BITTORRENT_SESSION_KEY("PeXEnabled"), true)
+    , m_isDHTEnabled(BITTORRENT_SESSION_KEY("DHTEnabled"), false)
+    , m_isLSDEnabled(BITTORRENT_SESSION_KEY("LSDEnabled"), false)
+    , m_isPeXEnabled(BITTORRENT_SESSION_KEY("PeXEnabled"), false)
     , m_isIPFilteringEnabled(BITTORRENT_SESSION_KEY("IPFilteringEnabled"), false)
     , m_isTrackerFilteringEnabled(BITTORRENT_SESSION_KEY("TrackerFilteringEnabled"), false)
     , m_IPFilterFile(BITTORRENT_SESSION_KEY("IPFilter"))
     , m_announceToAllTrackers(BITTORRENT_SESSION_KEY("AnnounceToAllTrackers"), false)
     , m_announceToAllTiers(BITTORRENT_SESSION_KEY("AnnounceToAllTiers"), true)
-    , m_asyncIOThreads(BITTORRENT_SESSION_KEY("AsyncIOThreadsCount"), 4)
-    , m_checkingMemUsage(BITTORRENT_SESSION_KEY("CheckingMemUsageSize"), 16)
-    , m_diskCacheSize(BITTORRENT_SESSION_KEY("DiskCacheSize"), 64)
-    , m_diskCacheTTL(BITTORRENT_SESSION_KEY("DiskCacheTTL"), 60)
+    , m_asyncIOThreads(BITTORRENT_SESSION_KEY("AsyncIOThreadsCount"), 12)
+    , m_checkingMemUsage(BITTORRENT_SESSION_KEY("CheckingMemUsageSize"), 4096)
+    , m_diskCacheSize(BITTORRENT_SESSION_KEY("DiskCacheSize"), 49152)
+    , m_diskCacheTTL(BITTORRENT_SESSION_KEY("DiskCacheTTL"), 300)
     , m_useOSCache(BITTORRENT_SESSION_KEY("UseOSCache"), true)
     , m_guidedReadCacheEnabled(BITTORRENT_SESSION_KEY("GuidedReadCache"), true)
 #ifdef Q_OS_WIN
@@ -287,15 +287,15 @@ Session::Session(QObject *parent)
 #else
     , m_coalesceReadWriteEnabled(BITTORRENT_SESSION_KEY("CoalesceReadWrite"), false)
 #endif
-    , m_isSuggestMode(BITTORRENT_SESSION_KEY("SuggestMode"), false)
-    , m_sendBufferWatermark(BITTORRENT_SESSION_KEY("SendBufferWatermark"), 500)
-    , m_sendBufferLowWatermark(BITTORRENT_SESSION_KEY("SendBufferLowWatermark"), 10)
-    , m_sendBufferWatermarkFactor(BITTORRENT_SESSION_KEY("SendBufferWatermarkFactor"), 50)
+    , m_isSuggestMode(BITTORRENT_SESSION_KEY("SuggestMode"), true)
+    , m_sendBufferWatermark(BITTORRENT_SESSION_KEY("SendBufferWatermark"), 71680)
+    , m_sendBufferLowWatermark(BITTORRENT_SESSION_KEY("SendBufferLowWatermark"), 21504)
+    , m_sendBufferWatermarkFactor(BITTORRENT_SESSION_KEY("SendBufferWatermarkFactor"), 200)
     , m_isAnonymousModeEnabled(BITTORRENT_SESSION_KEY("AnonymousModeEnabled"), false)
-    , m_isQueueingEnabled(BITTORRENT_SESSION_KEY("QueueingSystemEnabled"), true)
-    , m_maxActiveDownloads(BITTORRENT_SESSION_KEY("MaxActiveDownloads"), 3, lowerLimited(-1))
-    , m_maxActiveUploads(BITTORRENT_SESSION_KEY("MaxActiveUploads"), 3, lowerLimited(-1))
-    , m_maxActiveTorrents(BITTORRENT_SESSION_KEY("MaxActiveTorrents"), 5, lowerLimited(-1))
+    , m_isQueueingEnabled(BITTORRENT_SESSION_KEY("QueueingSystemEnabled"), false)
+    , m_maxActiveDownloads(BITTORRENT_SESSION_KEY("MaxActiveDownloads"), -1, lowerLimited(-1))
+    , m_maxActiveUploads(BITTORRENT_SESSION_KEY("MaxActiveUploads"), -1, lowerLimited(-1))
+    , m_maxActiveTorrents(BITTORRENT_SESSION_KEY("MaxActiveTorrents"), -1, lowerLimited(-1))
     , m_ignoreSlowTorrentsForQueueing(BITTORRENT_SESSION_KEY("IgnoreSlowTorrentsForQueueing"), false)
     , m_downloadRateForSlowTorrents(BITTORRENT_SESSION_KEY("SlowTorrentsDownloadRate"), 2)
     , m_uploadRateForSlowTorrents(BITTORRENT_SESSION_KEY("SlowTorrentsUploadRate"), 2)
@@ -306,17 +306,17 @@ Session::Session(QObject *parent)
     , m_includeOverheadInLimits(BITTORRENT_SESSION_KEY("IncludeOverheadInLimits"), false)
     , m_announceIP(BITTORRENT_SESSION_KEY("AnnounceIP"))
     , m_isSuperSeedingEnabled(BITTORRENT_SESSION_KEY("SuperSeedingEnabled"), false)
-    , m_maxConnections(BITTORRENT_SESSION_KEY("MaxConnections"), 500, lowerLimited(0, -1))
-    , m_maxHalfOpenConnections(BITTORRENT_SESSION_KEY("MaxHalfOpenConnections"), 20, lowerLimited(0, -1))
+    , m_maxConnections(BITTORRENT_SESSION_KEY("MaxConnections"), -1, lowerLimited(0, -1))
+    , m_maxHalfOpenConnections(BITTORRENT_SESSION_KEY("MaxHalfOpenConnections"), -1, lowerLimited(0, -1))
     , m_maxUploads(BITTORRENT_SESSION_KEY("MaxUploads"), -1, lowerLimited(0, -1))
-    , m_maxConnectionsPerTorrent(BITTORRENT_SESSION_KEY("MaxConnectionsPerTorrent"), 100, lowerLimited(0, -1))
+    , m_maxConnectionsPerTorrent(BITTORRENT_SESSION_KEY("MaxConnectionsPerTorrent"), -1, lowerLimited(0, -1))
     , m_maxUploadsPerTorrent(BITTORRENT_SESSION_KEY("MaxUploadsPerTorrent"), -1, lowerLimited(0, -1))
-    , m_btProtocol(BITTORRENT_SESSION_KEY("BTProtocol"), BTProtocol::Both
+    , m_btProtocol(BITTORRENT_SESSION_KEY("BTProtocol"), BTProtocol::TCP
         , clampValue(BTProtocol::Both, BTProtocol::UTP))
     , m_isUTPRateLimited(BITTORRENT_SESSION_KEY("uTPRateLimited"), true)
     , m_utpMixedMode(BITTORRENT_SESSION_KEY("uTPMixedMode"), MixedModeAlgorithm::TCP
         , clampValue(MixedModeAlgorithm::TCP, MixedModeAlgorithm::Proportional))
-    , m_multiConnectionsPerIpEnabled(BITTORRENT_SESSION_KEY("MultiConnectionsPerIp"), false)
+    , m_multiConnectionsPerIpEnabled(BITTORRENT_SESSION_KEY("MultiConnectionsPerIp"), true)
     , m_isAddTrackersEnabled(BITTORRENT_SESSION_KEY("AddTrackersEnabled"), false)
     , m_additionalTrackers(BITTORRENT_SESSION_KEY("AdditionalTrackers"))
     , m_globalMaxRatio(BITTORRENT_SESSION_KEY("GlobalMaxRatio"), -1, [](qreal r) { return r < 0 ? -1. : r;})
@@ -336,13 +336,13 @@ Session::Session(QObject *parent)
     , m_isBandwidthSchedulerEnabled(BITTORRENT_SESSION_KEY("BandwidthSchedulerEnabled"), false)
     , m_saveResumeDataInterval(BITTORRENT_SESSION_KEY("SaveResumeDataInterval"), 60)
     , m_port(BITTORRENT_SESSION_KEY("Port"), 8999)
-    , m_useRandomPort(BITTORRENT_SESSION_KEY("UseRandomPort"), false)
+    , m_useRandomPort(BITTORRENT_SESSION_KEY("UseRandomPort"), true)
     , m_networkInterface(BITTORRENT_SESSION_KEY("Interface"))
     , m_networkInterfaceName(BITTORRENT_SESSION_KEY("InterfaceName"))
     , m_networkInterfaceAddress(BITTORRENT_SESSION_KEY("InterfaceAddress"))
-    , m_isIPv6Enabled(BITTORRENT_SESSION_KEY("IPv6Enabled"), false)
+    , m_isIPv6Enabled(BITTORRENT_SESSION_KEY("IPv6Enabled"), true)
     , m_encryption(BITTORRENT_SESSION_KEY("Encryption"), 0)
-    , m_isForceProxyEnabled(BITTORRENT_SESSION_KEY("ForceProxy"), true)
+    , m_isForceProxyEnabled(BITTORRENT_SESSION_KEY("ForceProxy"), false)
     , m_isProxyPeerConnectionsEnabled(BITTORRENT_SESSION_KEY("ProxyPeerConnections"), false)
     , m_chokingAlgorithm(BITTORRENT_SESSION_KEY("ChokingAlgorithm"), ChokingAlgorithm::FixedSlots
         , clampValue(ChokingAlgorithm::FixedSlots, ChokingAlgorithm::RateBased))
@@ -451,12 +451,12 @@ Session::Session(QObject *parent)
     pack.set_int(libt::settings_pack::stop_tracker_timeout, 1);
     pack.set_int(libt::settings_pack::auto_scrape_interval, 1200); // 20 minutes
     pack.set_int(libt::settings_pack::auto_scrape_min_interval, 900); // 15 minutes
-    pack.set_int(libt::settings_pack::connection_speed, 20); // default is 10
+    pack.set_int(libt::settings_pack::connection_speed, 500); // default is 10
     pack.set_bool(libt::settings_pack::no_connect_privileged_ports, false);
     // Disk cache pool is rarely tested in libtorrent and doesn't free buffers
     // Soon to be deprecated there
     // More info: https://github.com/arvidn/libtorrent/issues/2251
-    pack.set_bool(libt::settings_pack::use_disk_cache_pool, false);
+    pack.set_bool(libt::settings_pack::use_disk_cache_pool, true);
     // libtorrent 1.1 enables UPnP & NAT-PMP by default
     // turn them off before `libt::session` ctor to avoid split second effects
     pack.set_bool(libt::settings_pack::enable_upnp, false);
@@ -1263,7 +1263,7 @@ void Session::configure(libtorrent::settings_pack &settingsPack)
 
     // The most secure, rc4 only so that all streams are encrypted
     settingsPack.set_int(libt::settings_pack::allowed_enc_level, libt::settings_pack::pe_rc4);
-    settingsPack.set_bool(libt::settings_pack::prefer_rc4, true);
+    settingsPack.set_bool(libt::settings_pack::prefer_rc4, false);
     switch (encryption()) {
     case 0: // Enabled
         settingsPack.set_int(libt::settings_pack::out_enc_policy, libt::settings_pack::pe_enabled);
@@ -1549,7 +1549,7 @@ void Session::configure(libtorrent::session_settings &sessionSettings)
     // The most secure, rc4 only so that all streams are encrypted
     libt::pe_settings encryptionSettings;
     encryptionSettings.allowed_enc_level = libt::pe_settings::rc4;
-    encryptionSettings.prefer_rc4 = true;
+    encryptionSettings.prefer_rc4 = false;
     switch (encryption()) {
     case 0: // Enabled
         encryptionSettings.out_enc_policy = libt::pe_settings::enabled;
@@ -2789,7 +2789,7 @@ void Session::setSaveResumeDataInterval(const uint value)
 
 int Session::port() const
 {
-    static int randomPort = Utils::Random::rand(1024, 65535);
+    static int randomPort = Utils::Random::rand(15000, 65535);
     if (useRandomPort())
         return randomPort;
     return m_port;
@@ -4777,4 +4777,4 @@ namespace
         return QString();
     }
 #endif
-}
+}
\ No newline at end of file
diff --git a/src/base/preferences.cpp b/src/base/preferences.cpp
index d5830ccc21..8de72dc27f 100644
--- a/src/base/preferences.cpp
+++ b/src/base/preferences.cpp
@@ -103,7 +103,7 @@ void Preferences::setLocale(const QString &locale)
 
 bool Preferences::deleteTorrentFilesAsDefault() const
 {
-    return value("Preferences/General/DeleteTorrentsFilesAsDefault", false).toBool();
+    return value("Preferences/General/DeleteTorrentsFilesAsDefault", true).toBool();
 }
 
 void Preferences::setDeleteTorrentFilesAsDefault(bool del)
@@ -123,7 +123,7 @@ void Preferences::setConfirmOnExit(bool confirm)
 
 bool Preferences::speedInTitleBar() const
 {
-    return value("Preferences/General/SpeedInTitleBar", false).toBool();
+    return value("Preferences/General/SpeedInTitleBar", true).toBool();
 }
 
 void Preferences::showSpeedInTitleBar(bool show)
